import struct
import wave
import argparse


# 96
# amplitude_lookuptable = [
# 0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
# 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x0010,
# 0x0011, 0x0013, 0x0015, 0x0017, 0x0019, 0x001C, 0x001F, 0x0022,
# 0x0025, 0x0029, 0x002D, 0x0032, 0x0037, 0x003C, 0x0042, 0x0049,
# 0x0050, 0x0058, 0x0061, 0x006B, 0x0076, 0x0082, 0x008F, 0x009D,
# 0x00AD, 0x00BE, 0x00D1, 0x00E6, 0x00FD, 0x0117, 0x0133, 0x0151,
# 0x0173, 0x0198, 0x01C1, 0x01EE, 0x0220, 0x0256, 0x0292, 0x02D4,
# 0x031C, 0x036C, 0x03C3, 0x0424, 0x048E, 0x0502, 0x0583, 0x0610,
# 0x06AB, 0x0756, 0x0812, 0x08E0, 0x09C3, 0x0ABD, 0x0BD0, 0x0CFF,
# 0x0E4C, 0x0FBA, 0x114C, 0x1307, 0x14EE, 0x1706, 0x1954, 0x1BDC,
# 0x1EA5, 0x21B6, 0x2515, 0x28CA, 0x2CDF, 0x315B, 0x364B, 0x3BB9,
# 0x41B2, 0x4844, 0x4F7E, 0x5771, 0x602F, 0x69CE, 0x7462, 0x7FFF
# ]

amplitude_lookuptable = [
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10,
    0xe8, 0xeb, 0xee, 0xf1, 0xf4, 0xf7, 0xfa, 0xfd,
    0x03, 0x06, 0x09, 0x0c, 0x0f, 0x12, 0x15, 0x18,
    0xe0, 0xe4, 0xe8, 0xec, 0xf0, 0xf4, 0xf8, 0xfc,
    0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c, 0x20,
    0xd8, 0xdd, 0xe2, 0xe7, 0xec, 0xf1, 0xf6, 0xfb,
    0x05, 0x0a, 0x0f, 0x14, 0x19, 0x1e, 0x23, 0x28,
    0xd0, 0xd6, 0xdc, 0xe2, 0xe8, 0xee, 0xf4, 0xfa,
    0x06, 0x0c, 0x12, 0x18, 0x1e, 0x24, 0x2a, 0x30,
    0xc8, 0xcf, 0xd6, 0xdd, 0xe4, 0xeb, 0xf2, 0xf9,
    0x07, 0x0e, 0x15, 0x1c, 0x23, 0x2a, 0x31, 0x38,
    0xc0, 0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,
    0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40,
    0xb8, 0xc1, 0xca, 0xd3, 0xdc, 0xe5, 0xee, 0xf7,
    0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48,
    0xb0, 0xba, 0xc4, 0xce, 0xd8, 0xe2, 0xec, 0xf6,
    0x0a, 0x14, 0x1e, 0x28, 0x32, 0x3c, 0x46, 0x50,
    0xa8, 0xb3, 0xbe, 0xc9, 0xd4, 0xdf, 0xea, 0xf5,
    0x0b, 0x16, 0x21, 0x2c, 0x37, 0x42, 0x4d, 0x58,
    0xa0, 0xac, 0xb8, 0xc4, 0xd0, 0xdc, 0xe8, 0xf4,
    0x0c, 0x18, 0x24, 0x30, 0x3c, 0x48, 0x54, 0x60,
    0x98, 0xa5, 0xb2, 0xbf, 0xcc, 0xd9, 0xe6, 0xf3,
    0x0d, 0x1a, 0x27, 0x34, 0x41, 0x4e, 0x5b, 0x68,
    0x90, 0x9e, 0xac, 0xba, 0xc8, 0xd6, 0xe4, 0xf2,
    0x0e, 0x1c, 0x2a, 0x38, 0x46, 0x54, 0x62, 0x70,
    0x88, 0x97, 0xa6, 0xb5, 0xc4, 0xd3, 0xe2, 0xf1,
    0x0f, 0x1e, 0x2d, 0x3c, 0x4b, 0x5a, 0x69, 0x78,
    0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0,
    0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x7f
]

amptable2 = [ 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff ]

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='adp file converter launch options')
    parser.add_argument('adp_file', action='store',
                        default='', help='adp file to convert')
    parser.add_argument('-o', dest='output_file',
                        help="Output wave file", required=True, metavar='output_file')
    args = parser.parse_args()
    
    print("Looktable length: %d" % len(amplitude_lookuptable))
    fd = open(args.adp_file, "rb")
    nchannels = 2
    # sig, nchannels, length = struct.unpack("<III", fd.read(0x0C))
    # if sig != 0x46524544:
    #     raise ValueError("[-] Wrong magic")
    # if nchannels not in [1, 2]:
    #     raise ValueError("[-] Wrong number of channels")
    # print "[+] nchannels : %d" % nchannels
    # print "[+] length    : 0x%08X" % length
    # while 1:
    #     print("[r]ead or [d]ecode ?")
    #     b = struct.unpack("<B", fd.read(1))[0]
    #     print("Byte: %s" % hex(b))
    #     c = raw_input()
    #     if c == "d":
    #         break

    fd.read(12) # skipping metadata

    audio_data = fd.read()
    wave_output = wave.open(args.output_file, "wb")
    # BitsPerSample : 16
    # SampleRate    : 22050
    wave_output.setparams((nchannels, 1, 11025, 0, 'NONE', 'not compressed'))

    v_0 = 0x00
    v_1 = 0x00
    for i in xrange(0, len(audio_data), nchannels):
        # convert sample
        s1 = struct.unpack("<B", audio_data[i])[0]

        if (s1 & 0x08) != 0x00:
            v_0 = (v_0 - amptable2[s1 & 0x07])
        elif (s1 & 0x80) != 0x00:
            if (s1 & 0x40) != 0x00:
                v_0 = (v_0 - amplitude_lookuptable[s1 & 0x3F])
            else:
                v_0 = (v_0 - amplitude_lookuptable[s1 & 0x7F])
        else:
            v_0 = (v_0 + amplitude_lookuptable[s1])
        wave_output.writeframes(struct.pack("<H", (v_0 & 0xFFFF)))
        # if nchannels == 0x02:
        #     # convert sample
        #     s2 = struct.unpack("<B", audio_data[i + 1])[0]
        #     if (s2 & 0x80) != 0x00:
        #         v_1 = (v_1 - amplitude_lookuptable[s2 & 0x7F])
        #     else:
        #         v_1 = (v_1 + amplitude_lookuptable[s2])
        #     wave_output.writeframes(struct.pack("<H", (v_1 & 0xFFFF)))
    wave_output.close()
